:- import load_dsv/3, add_cvt_type_hook/2, remove_cvt_type_hook/1 from proc_files.
:- import ith/3, atom_prefix/2 from basics.
:- table site/1, useful_site/1, year/1, useful_year/1, useful_disappeared/2.

/* Loading a semicolon-delimited copy of the extended dataset */
load_ssv(F,P,O) :-
    load_dsv(F,P,[separator(;),titles|O]).

load_rows(F) :-
    remove_cvt_type_hook(maybe_num),
    add_cvt_type_hook(maybe_num,atom_mnum(_,_)),
    load_ssv(F,row(atom,maybe_num,maybe_num,maybe_num,maybe_num,maybe_num,maybe_num,maybe_num,maybe_num,maybe_num,maybe_num,maybe_num,maybe_num,maybe_num,maybe_num,maybe_num),[]).

/* Facts for the database */

entry(Site,Year,Spec,Entry) :-
    Row = row(Site,Year,_,_,_,_,_,_,_,_,_,_,_,_,_,_),
    once(call(Row)),
    Row =.. [_|Args],
    once(ith(I,[site,year,adult,young,cox,coy,ele,len,pre,pro,wid,cor,spm,spr,bm,bv],Spec)),
    ith(I,Args,Entry).

entry_(Year,Spec,Site,Entry) :-
    entry(Site,Year,Spec,Entry).

site(Site) :-
    row(Site,2009,_,_,_,_,_,_,_,_,_,_,_,_,_,_).

useful_site(Site) :-
    site(Site).

year(Year) :-
    row(_,Year,_,_,_,_,_,_,_,_,_,_,_,_,_,_).

channel_width(Pair,Width) :-
    nonvar(Pair),
    Pair = Site-_,
    channel_width(Site,Width).
channel_width(Site,Width) :-
    not_pair(Site),
    entry(Site,2009,wid,Width).
log_channel_width(Site,LogWidth) :-
    channel_width(Site,Width),
    LogWidth is log(Width).

altitude(Pair,Alt) :-
    nonvar(Pair),
    Pair = Site-_,
    altitude(Site,Alt).
altitude(Site,Alt) :-
    not_pair(Site),
    entry(Site,2009,ele,Alt).

protected(Pair,Prot) :-
    nonvar(Pair),
    Pair = Site-_,
    protected(Site,Prot).
protected(Site,Prot) :-
    not_pair(Site),
    entry(Site,2009,pro,Prot).
protected(Site) :-
    protected(Site,1).
unprotected(Site) :-
    protected(Site,0).

crb(Pair,CRB) :-
    nonvar(Pair),
    Pair = Site-_,
    crb(Site,CRB).
crb(Site,CRB) :-
    not_pair(Site),
    entry(Site,2009,spm,CRB).
crb(Site) :-
    crb(Site,1).
no_crb(Site) :-
    crb(Site,0).

young_disappeared(Pair,1) :-
    nonvar(Pair),
    Pair = Site-Year,
    young_disappeared(Site,Year).
young_disappeared(Pair,0) :-
    nonvar(Pair),
    Pair = Site-Year,
    no_young_disappeared(Site,Year).
young_disappeared(Site,Year) :-
    young_last(Site,Year),
    no_young(Site,Year).
no_young_disappeared(Site,Year) :-
    young_last(Site,Year),
    young(Site,Year).
young_disappeared(Site-Year) :-
    young_disappeared(Site,Year).


check_dam(Pair,Dam) :-
    nonvar(Pair),
    Pair = Site-_,
    check_dam(Site,Dam).
check_dam(Site,0) :-
    not_pair(Site),
    no_check_dam(Site).
check_dam(Site,1) :-
    not_pair(Site),
    check_dam(Site).
check_dam(Site) :-
    check_dam_Ups(Site),
    !.
check_dam(Site) :-
    check_dam_Dow(Site),
    !.
no_check_dam(Site) :-
    entry(Site,2009,bm,N1),
    entry(Site,2009,bv,N2),
    \+ number(N1),
    \+ number(N2).



flood_levees(Pair,FloodLevees) :-
    nonvar(Pair),
    Pair = Site-_,
    flood_levees(Site,FloodLevees).
flood_levees(Site,FloodLevees) :-
    not_pair(Site),
    entry(Site,2009,spr,FloodLevees).
flood_levees(Site) :-
    flood_levees(Site,1).
no_flood_levees(Site) :-
    flood_levees(Site,0).

useful_year(Year) :-
    year(Year),
    Year \= 2009.

useful_disappeared(Site,Year) :-
    young_disappeared(Site,Year).
useful_disappeared(Site,Year) :-
    no_young_disappeared(Site,Year).


% Other features that may be considered
check_dam_Ups(Site) :-
    entry(Site,2009,bm,N),
    number(N).
check_dam_Dow(Site) :-
    entry(Site,2009,bv,N),
    number(N).
check_dam_both(Site) :-
    check_dam_Ups(Site),
    check_dam_Dow(Site).


adult(Site,Year) :-
    entry(Site,Year,adult,N),
    integer(N),
    N > 0.
no_adult(Site,Year) :-
    entry(Site,Year,adult,0).

young(Site,Year) :-
    entry(Site,Year,young,N),
    integer(N),
    N > 0.
no_young(Site,Year) :-
    entry(Site,Year,young,0).


old_population(Site) :-
    entry(Site,2009,pre,1).

wide_channel(Site) :-
    entry(Site,2009,wid,N),
    integer(N),
    N > 70.
narrow_channel(Site) :-
    entry(Site,2009,wid,N),
    integer(N),
    N =< 70.

wide_corridor(Site) :-
    entry(Site,2009,cor,N),
    integer(N),
    N > 70.
narrow_corridor(Site) :-
    entry(Site,2009,cor,N),
    integer(N),
    N =< 70.

adult_last(Site,Year) :-
    LastYear is Year - 1,
    adult(Site,LastYear).
no_adult_last(Site,Year) :-
    LastYear is Year - 1,
    no_adult(Site,LastYear).

young_last(Site,Year) :-
    LastYear is Year - 1,
    young(Site,LastYear).
no_young_last(Site,Year) :-
    LastYear is Year - 1,
    no_young(Site,LastYear).

close_to_upstream_dam(Site) :-
    entry(Site,2009,bm,D),
    integer(D),
    D < 1000.
far_from_upstream_dam(Site) :-
    entry(Site,2009,bm,D),
    integer(D),
    D >= 1000.

close_to_downstream_dam(Site) :-
    entry(Site,2009,bv,D),
    integer(D),
    D < 1000.
far_from_downstream_dam(Site) :-
    entry(Site,2009,bv,D),
    integer(D),
    D >= 1000.

young_appeared(Site,Year) :-
    no_young_last(Site,Year),
    young(Site,Year).
no_young_appeared(Site,Year) :-
    no_young_last(Site,Year),
    no_young(Site,Year).

young_appeared(Site-Year) :-
    young_appeared(Site,Year).

useful_appeared(Site,Year) :-
    young_appeared(Site,Year).
useful_appeared(Site,Year) :-
    no_young_appeared(Site,Year).


rv_system(System,Site) :-
    rv_system(System),
    atom_prefix(Site,System).

rv_system(bz).
rv_system(tn).
rv_system(bl).
rv_system(vi).
rv_system(pd).
rv_system(av).

distance(Site1,Site2,D) :-
    entry(Site1,2009,cox,X1),
    entry(Site1,2009,coy,Y1),
    entry(Site2,2009,cox,X2),
    entry(Site2,2009,coy,Y2),
    D is sqrt((X1 - X2)*(X1 - X2) + (Y1 - Y2)*(Y1 - Y2)).

closeby(Site1,Site2) :-
    site(Site1),
    site(Site2),
    distance(Site1,Site2,D),
    D < 0.1.

plant_closeby(Site,Year) :-
    closeby(Site,Site1),
    adult_last(Site1,Year).

safe_UpsD(Site,UpsD) :-
    entry(Site,2009,bm,UpsD),
    number(UpsD).
safe_UpsD(Site,0) :-
    entry(Site,2009,bm,UpsD),
    \+ number(UpsD).

safe_DowD(Site,DowD) :-
    entry(Site,2009,bv,DowD),
    number(DowD).
safe_DowD(Site,0) :-
    entry(Site,2009,bv,DowD),
    \+ number(DowD).



with(Pred1,Pred2,Site,N) :-
    call(Pred1,Site,N1),
    call(Pred2,Site,N2),
    N is N1*N2.
% Constructing With's for input
with(_,[],[]).
with(Pred1,[Pred|Preds],[with(Pred1,Pred)|WPreds]) :-
    with(Pred1,Preds,WPreds).

not_pair(X) :-
    var(X).
not_pair(X) :-
    nonvar(X),
    X \= _-_.

/* CSV Processing Utilities */

atom_mnum(X,N) :-
    is_number_atom(X),
    !,
    atom_codes(X,Codes),
    number_codes(N,Codes).
atom_mnum(X,X).







